(*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the "hack" directory of this source tree.
 *
 *)

type mode =
  | To_hack of {
      notebook_number: string;
      notebook_header: string;
    }
  | To_notebook

let parse_mode () =
  let mode = ref None in
  let spec =
    [
      ( "--hack-to-notebook",
        Arg.Unit (fun () -> mode := Some To_notebook),
        "Convert a Hack file generated by `hh --notebook-to-hack` into a notebook. Pass hack file contents via stdin"
      );
      ( "--notebook-to-hack",
        (let notebook_number = ref "" in
         Arg.Tuple
           [
             Arg.String (( := ) notebook_number);
             Arg.String
               (fun notebook_header ->
                 mode :=
                   Some
                     (To_hack
                        { notebook_number = !notebook_number; notebook_header }));
           ]),
        "Convert notebook to a Hack file."
        ^ {|Pass notebook in .ipynb format to stdin with a notebook_number (example: "N1234")|}
        ^ {| and a header (example: "// copyright Meta")|} );
    ]
  in
  Arg.parse
    spec
    (fun _ -> failwith "invalid arg")
    "usage: pass --notebook-to-hack or --hack-to-notebook";
  match !mode with
  | Some mode -> mode
  | None -> failwith "see usage"

let () =
  let exit_status =
    match parse_mode () with
    | To_hack { notebook_number; notebook_header } ->
      Notebook_convert.notebook_to_hack ~notebook_number ~header:notebook_header
    | To_notebook -> Notebook_convert.hack_to_notebook ()
  in
  if Exit_status.exit_code exit_status <> 0 then
    raise @@ Exit_status.Exit_with exit_status
