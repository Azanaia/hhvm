error: Typing[4110] Invalid return type

 12 |   }
 13 |   return »$z«;
 14 | }

File "refinment_is.php", line 13, character 10 - line 13, character 11:

Expected `C`

 7 | function inter_is(A $a, C $c): »C« {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 32 - line 7, character 32:

But got `A`

 7 | function inter_is(»A« $a, C $c): C {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 19 - line 7, character 19:

This error has 9 steps, a maximum depth of 2 and contains 0 reversals.

Here's why: this hint

 7 | function inter_is(»A« $a, C $c): C {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 19 - line 7, character 19:

flows into this expression because it is a parameter hint

 7 | function inter_is(A »$a«, C $c): C {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 21 - line 7, character 22:

which itself flows into this expression because the local variable has this type

 7 | function inter_is(A $a, C $c): C {
 8 |   if(»$a« is I) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 6 - line 8, character 7:

which itself flows up into this `is` expression as an element of the intersection type

 7 | function inter_is(A $a, C $c): C {
 8 |   if(»$a is I«) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 6 - line 8, character 12:

which itself flows into this expression because the local variable has this type

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is I) {
 9 |     $z = »$a«;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 9, character 10 - line 9, character 11:

which itself flows into this expression because of an assignment

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is I) {
 9 |     »$z« = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 9, character 5 - line 9, character 6:

which itself flows up into this expression as an element of the union type

  7 | function inter_is(A $a, C $c): C {
  8 |   »if($a is I) {
  9 |     $z = $a;
 10 |   } else {
 11 |     $z = $c;
 12 |   }«
 13 |   return $z;
 14 | }

File "refinment_is.php", line 8, character 3 - line 12, character 3:

which itself flows into this expression because the local variable has this type

 12 |   }
 13 |   return »$z«;
 14 | }

File "refinment_is.php", line 13, character 10 - line 13, character 11:

which itself flows into this expression because it is a return hint

 12 |   }
 13 |   »return $z;«
 14 | }

File "refinment_is.php", line 13, character 3 - line 13, character 12:

which itself flows into this hint because they are required to be subtypes

 7 | function inter_is(A $a, C $c): »C« {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 32 - line 7, character 32:

Raw:
[
  {
    "Def":[
      {"filename":"refinment_is.php","line":4,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":19,"char_end":19}]
        }
      ]
    ]
  },
  "Flow_param_hint",
  {
    "Witness":[{"filename":"refinment_is.php","line":7,"char_start":21,"char_end":22}]
  },
  "Flow_local",
  {
    "Witness":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":7}]
  },
  "Flow_prj",
  {
    "Prj":[
      {"Asymm":["Sub","Prj_asymm_inter"]},
      [
        {
          "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
        },
        "Flow_local",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
        },
        "Flow_assign",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
        },
        "Flow_prj",
        {
          "Prj":[
            {"Asymm":["Sub","Prj_asymm_union"]},
            [
              {
                "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
              },
              "Flow_local",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
              },
              "Flow_return_hint",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
              }
            ]
          ]
        }
      ]
    ]
  },
  "Flow_subtype_toplevel",
  {
    "Def":[
      {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
        }
      ]
    ]
  }
]


File "", line 0, character 0 - line 0, character -1:

Normalised:
[
  {
    "Def":[
      {"filename":"refinment_is.php","line":4,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":19,"char_end":19}]
        }
      ]
    ]
  },
  "Flow_param_hint",
  {
    "Witness":[{"filename":"refinment_is.php","line":7,"char_start":21,"char_end":22}]
  },
  "Flow_local",
  {
    "Witness":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":7}]
  },
  "Flow_prj",
  {
    "Prj":[
      {"Asymm":["Sub","Prj_asymm_inter"]},
      [
        {
          "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
        },
        "Flow_local",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
        },
        "Flow_assign",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
        },
        "Flow_prj",
        {
          "Prj":[
            {"Asymm":["Sub","Prj_asymm_union"]},
            [
              {
                "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
              },
              "Flow_local",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
              },
              "Flow_return_hint",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
              }
            ]
          ]
        }
      ]
    ]
  },
  "Flow_subtype_toplevel",
  {
    "Def":[
      {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
        }
      ]
    ]
  }
]


File "", line 0, character 0 - line 0, character -1:

Path:
{
  "stats":{"max_depth":2,"length":9,"reversals":0},
  "path_elems":[
    [
      {
        "Def":[
          {"filename":"refinment_is.php","line":4,"char_start":7,"char_end":7},
          [
            {
              "Hint":[{"filename":"refinment_is.php","line":7,"char_start":19,"char_end":19}]
            }
          ]
        ]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_param_hint"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":7,"char_start":21,"char_end":22}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":7}]
      }
    ],
    {
      "Edge":{"dir":"Fwd","kind":"Flow_prj","in_to":{"Asymm":["Sub","Prj_asymm_inter"]}}
    },
    [
      {
        "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_assign"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
      }
    ],
    {
      "Edge":{"dir":"Fwd","kind":"Flow_prj","in_to":{"Asymm":["Sub","Prj_asymm_union"]}}
    },
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_return_hint"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_subtype_toplevel"}},
    [
      {
        "Def":[
          {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
          [
            {
              "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
            }
          ]
        ]
      }
    ]
  ]
}


File "", line 0, character 0 - line 0, character -1:

error: Typing[4110] Invalid return type

 12 |   }
 13 |   return »$z«;
 14 | }

File "refinment_is.php", line 13, character 10 - line 13, character 11:

Expected `C`

 7 | function inter_is(A $a, C $c): »C« {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 32 - line 7, character 32:

But got `(A & I)` from this `is` expression test

 7 | function inter_is(A $a, C $c): C {
 8 |   if(»$a is I«) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 6 - line 8, character 12:

This error has 6 steps, a maximum depth of 1 and contains 0 reversals.

Here's why: this `is` expression

 7 | function inter_is(A $a, C $c): C {
 8 |   if(»$a is I«) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 6 - line 8, character 12:

flows into this expression because the local variable has this type

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is I) {
 9 |     $z = »$a«;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 9, character 10 - line 9, character 11:

which itself flows into this expression because of an assignment

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is I) {
 9 |     »$z« = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 9, character 5 - line 9, character 6:

which itself flows up into this expression as an element of the union type

  7 | function inter_is(A $a, C $c): C {
  8 |   »if($a is I) {
  9 |     $z = $a;
 10 |   } else {
 11 |     $z = $c;
 12 |   }«
 13 |   return $z;
 14 | }

File "refinment_is.php", line 8, character 3 - line 12, character 3:

which itself flows into this expression because the local variable has this type

 12 |   }
 13 |   return »$z«;
 14 | }

File "refinment_is.php", line 13, character 10 - line 13, character 11:

which itself flows into this expression because it is a return hint

 12 |   }
 13 |   »return $z;«
 14 | }

File "refinment_is.php", line 13, character 3 - line 13, character 12:

which itself flows into this hint because they are required to be subtypes

 7 | function inter_is(A $a, C $c): »C« {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 32 - line 7, character 32:

Raw:
[
  {
    "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
  },
  "Flow_local",
  {
    "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
  },
  "Flow_assign",
  {
    "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
  },
  "Flow_prj",
  {
    "Prj":[
      {"Asymm":["Sub","Prj_asymm_union"]},
      [
        {
          "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
        },
        "Flow_local",
        {
          "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
        },
        "Flow_return_hint",
        {
          "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
        }
      ]
    ]
  },
  "Flow_subtype_toplevel",
  {
    "Def":[
      {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
        }
      ]
    ]
  }
]


File "", line 0, character 0 - line 0, character -1:

Normalised:
[
  {
    "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
  },
  "Flow_local",
  {
    "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
  },
  "Flow_assign",
  {
    "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
  },
  "Flow_prj",
  {
    "Prj":[
      {"Asymm":["Sub","Prj_asymm_union"]},
      [
        {
          "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
        },
        "Flow_local",
        {
          "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
        },
        "Flow_return_hint",
        {
          "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
        }
      ]
    ]
  },
  "Flow_subtype_toplevel",
  {
    "Def":[
      {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
        }
      ]
    ]
  }
]


File "", line 0, character 0 - line 0, character -1:

Path:
{
  "stats":{"max_depth":1,"length":6,"reversals":0},
  "path_elems":[
    [
      {
        "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_assign"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
      }
    ],
    {
      "Edge":{"dir":"Fwd","kind":"Flow_prj","in_to":{"Asymm":["Sub","Prj_asymm_union"]}}
    },
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_return_hint"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_subtype_toplevel"}},
    [
      {
        "Def":[
          {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
          [
            {
              "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
            }
          ]
        ]
      }
    ]
  ]
}


File "", line 0, character 0 - line 0, character -1:

error: Typing[4110] Invalid return type

 12 |   }
 13 |   return »$z«;
 14 | }

File "refinment_is.php", line 13, character 10 - line 13, character 11:

Expected `C`

 7 | function inter_is(A $a, C $c): »C« {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 32 - line 7, character 32:

But got `I`

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is »I«) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 12 - line 8, character 12:

This error has 7 steps, a maximum depth of 2 and contains 0 reversals.

Here's why: this hint

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is »I«) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 12 - line 8, character 12:

flows up into this `is` expression as an element of the intersection type

 7 | function inter_is(A $a, C $c): C {
 8 |   if(»$a is I«) {
 9 |     $z = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 8, character 6 - line 8, character 12:

which itself flows into this expression because the local variable has this type

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is I) {
 9 |     $z = »$a«;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 9, character 10 - line 9, character 11:

which itself flows into this expression because of an assignment

 7 | function inter_is(A $a, C $c): C {
 8 |   if($a is I) {
 9 |     »$z« = $a;
10 |   } else {
11 |     $z = $c;
12 |   }
13 |   return $z;
14 | }

File "refinment_is.php", line 9, character 5 - line 9, character 6:

which itself flows up into this expression as an element of the union type

  7 | function inter_is(A $a, C $c): C {
  8 |   »if($a is I) {
  9 |     $z = $a;
 10 |   } else {
 11 |     $z = $c;
 12 |   }«
 13 |   return $z;
 14 | }

File "refinment_is.php", line 8, character 3 - line 12, character 3:

which itself flows into this expression because the local variable has this type

 12 |   }
 13 |   return »$z«;
 14 | }

File "refinment_is.php", line 13, character 10 - line 13, character 11:

which itself flows into this expression because it is a return hint

 12 |   }
 13 |   »return $z;«
 14 | }

File "refinment_is.php", line 13, character 3 - line 13, character 12:

which itself flows into this hint because they are required to be subtypes

 7 | function inter_is(A $a, C $c): »C« {
 8 |   if($a is I) {
 9 |     $z = $a;

File "refinment_is.php", line 7, character 32 - line 7, character 32:

Raw:
[
  {
    "Def":[
      {"filename":"refinment_is.php","line":3,"char_start":11,"char_end":11},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":8,"char_start":12,"char_end":12}]
        }
      ]
    ]
  },
  "Flow_prj",
  {
    "Prj":[
      {"Asymm":["Sub","Prj_asymm_inter"]},
      [
        {
          "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
        },
        "Flow_local",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
        },
        "Flow_assign",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
        },
        "Flow_prj",
        {
          "Prj":[
            {"Asymm":["Sub","Prj_asymm_union"]},
            [
              {
                "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
              },
              "Flow_local",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
              },
              "Flow_return_hint",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
              }
            ]
          ]
        }
      ]
    ]
  },
  "Flow_subtype_toplevel",
  {
    "Def":[
      {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
        }
      ]
    ]
  }
]


File "", line 0, character 0 - line 0, character -1:

Normalised:
[
  {
    "Def":[
      {"filename":"refinment_is.php","line":3,"char_start":11,"char_end":11},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":8,"char_start":12,"char_end":12}]
        }
      ]
    ]
  },
  "Flow_prj",
  {
    "Prj":[
      {"Asymm":["Sub","Prj_asymm_inter"]},
      [
        {
          "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
        },
        "Flow_local",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
        },
        "Flow_assign",
        {
          "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
        },
        "Flow_prj",
        {
          "Prj":[
            {"Asymm":["Sub","Prj_asymm_union"]},
            [
              {
                "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
              },
              "Flow_local",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
              },
              "Flow_return_hint",
              {
                "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
              }
            ]
          ]
        }
      ]
    ]
  },
  "Flow_subtype_toplevel",
  {
    "Def":[
      {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
      [
        {
          "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
        }
      ]
    ]
  }
]


File "", line 0, character 0 - line 0, character -1:

Path:
{
  "stats":{"max_depth":2,"length":7,"reversals":0},
  "path_elems":[
    [
      {
        "Def":[
          {"filename":"refinment_is.php","line":3,"char_start":11,"char_end":11},
          [
            {
              "Hint":[{"filename":"refinment_is.php","line":8,"char_start":12,"char_end":12}]
            }
          ]
        ]
      }
    ],
    {
      "Edge":{"dir":"Fwd","kind":"Flow_prj","in_to":{"Asymm":["Sub","Prj_asymm_inter"]}}
    },
    [
      {
        "Is_refinement":[{"filename":"refinment_is.php","line":8,"char_start":6,"char_end":12}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":9,"char_start":10,"char_end":11}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_assign"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":9,"char_start":5,"char_end":6}]
      }
    ],
    {
      "Edge":{"dir":"Fwd","kind":"Flow_prj","in_to":{"Asymm":["Sub","Prj_asymm_union"]}}
    },
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":8,"char_start":3,"char_end":56}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_local"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":13,"char_start":10,"char_end":11}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_return_hint"}},
    [
      {
        "Witness":[{"filename":"refinment_is.php","line":13,"char_start":3,"char_end":12}]
      }
    ],
    {"Edge":{"dir":"Fwd","kind":"Flow_subtype_toplevel"}},
    [
      {
        "Def":[
          {"filename":"refinment_is.php","line":5,"char_start":7,"char_end":7},
          [
            {
              "Hint":[{"filename":"refinment_is.php","line":7,"char_start":32,"char_end":32}]
            }
          ]
        ]
      }
    ]
  ]
}


File "", line 0, character 0 - line 0, character -1:

3 errors found.
