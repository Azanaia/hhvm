error: Typing[4110] Invalid return type

File class_expr_classname.php, line 10, character 10 - line 10, character 12:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);
10 |   return »$gc«;
11 | }

Expected int

File class_expr_classname.php, line 8, character 29 - line 8, character 31:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): »int« {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }

But got string

File class_expr_classname.php, line 8, character 15 - line 8, character 22:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(»class<C>« $c): int {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }

  via this generic T

File class_expr_classname.php, line 6, character 58 - line 6, character 58:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(T $t): »T« { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

Here's why:


  Step 1 of 5                                                                   

I started by checking this subtype relationship.

The subtype comes from this return hint

File class_expr_classname.php, line 6, character 58 - line 6, character 58:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(T $t): »T« { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

and flows into this expression

File class_expr_classname.php, line 9, character 9 - line 9, character 29:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname($c)«;
10 |   return $gc;
11 | }

as the return type of the function call

which itself flows into this expression

File class_expr_classname.php, line 9, character 3 - line 9, character 5:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   »$gc« = generic_classname($c);
10 |   return $gc;
11 | }

via an assignment

which itself flows into this expression

File class_expr_classname.php, line 10, character 10 - line 10, character 12:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);
10 |   return »$gc«;
11 | }

as the type of the local variable

which itself flows into this expression

File class_expr_classname.php, line 10, character 3 - line 10, character 13:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);
10 |   »return $gc;«
11 | }

because it is used in a return position

The supertype comes from this hint

File class_expr_classname.php, line 8, character 29 - line 8, character 31:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): »int« {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }


  Step 2 of 5                                                                   

The subtype is a union type so next I checked the subtype constraint is satisfied for all its elements.

The subtype comes from this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 58 - line 6, character 58:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(T $t): »T« { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

which I solved to this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 51 - line 6, character 51:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(»T« $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

The supertype is the same as before.

File class_expr_classname.php, line 8, character 29 - line 8, character 31:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): »int« {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }


  Step 3 of 5                                                                   

The subtype is a class<T> type and the supertype might be classname<T> or one of its supertypes, so next I checked the constraint with the subtype rewritten to classname<T>.

The subtype comes from this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 58 - line 6, character 58:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(T $t): »T« { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

which I solved to this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 51 - line 6, character 51:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(»T« $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

The supertype is the same as before.

File class_expr_classname.php, line 8, character 29 - line 8, character 31:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): »int« {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }


  Step 4 of 5                                                                   

The subtype declares an upper bound so next I checked that was a subtype of the supertype.

The subtype comes from this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 58 - line 6, character 58:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(T $t): »T« { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

which I solved to this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 51 - line 6, character 51:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(»T« $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

The supertype is the same as before.

File class_expr_classname.php, line 8, character 29 - line 8, character 31:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): »int« {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }


  Step 5 of 5                                 (here is where the error occurred) 

The subtype declares an upper bound so next I checked that was a subtype of the supertype.

The subtype comes from this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 58 - line 6, character 58:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(T $t): »T« { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

which I solved to this generic parameter T of generic_classname

File class_expr_classname.php, line 9, character 9 - line 9, character 25:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = »generic_classname«($c);
10 |   return $gc;
11 | }

and flows into this hint

File class_expr_classname.php, line 6, character 51 - line 6, character 51:

 5 | class C {}
 6 | function generic_classname<T as classname<mixed>>(»T« $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): int {
 9 |   $gc = generic_classname($c);

as the instantiation of the generic T

The supertype is the same as before.

File class_expr_classname.php, line 8, character 29 - line 8, character 31:

 6 | function generic_classname<T as classname<mixed>>(T $t): T { return $t; }
 7 | 
 8 | function test(class<C> $c): »int« {
 9 |   $gc = generic_classname($c);
10 |   return $gc;
11 | }

