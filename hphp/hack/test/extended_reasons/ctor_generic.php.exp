error: Typing[4110] Invalid argument

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, »$sender«);
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 33 - line 21, character 39:

Expected `null`

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

But got `string`

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 39 - line 20, character 44:

I checked the subtype constraint in [Main] because it was implied by transitivity from the constraints on the generic parameter `TB` of `TestServiceBase` in [Lower] and [Upper]

Main

[Main] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

File "ctor_generic.php", line 12, character 19 - line 12, character 29:

The supertype comes from this expression

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

[Main] Step 2 of 2

These are function types so next I checked the 2nd function parameter of the supertype and subtype were subtypes (functions are contravariant in their parameters so the direction of the subtype relationship is reversed).

This step is the cause of the error.

The subtype comes from this hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 39 - line 20, character 44:

and flows into this expression as the parameter hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string »$b«, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 46 - line 20, character 47:

which itself flows into this expression as the type of the local variable

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, »$b«, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 29 - line 21, character 30:

The supertype comes from this hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

Lower

[Lower] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

File "ctor_generic.php", line 12, character 19 - line 12, character 29:

The supertype comes from this expression

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

[Lower] Step 2 of 2

These are function types so next I checked the 2nd function parameter of the supertype and subtype were subtypes (functions are contravariant in their parameters so the direction of the subtype relationship is reversed).

The subtype comes from this hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 39 - line 20, character 44:

and flows into this expression as the parameter hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string »$b«, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 46 - line 20, character 47:

which itself flows into this expression as the type of the local variable

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, »$b«, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 29 - line 21, character 30:

The supertype comes from this generic parameter `TB` of `TestServiceBase`

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

Upper

[Upper] Step 1 of 4

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

File "ctor_generic.php", line 12, character 19 - line 12, character 29:

The supertype comes from this expression

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

[Upper] Step 2 of 4

These are function types so next I checked the 3rd function parameter of the supertype and subtype were subtypes (functions are contravariant in their parameters so the direction of the subtype relationship is reversed).

The subtype comes from this hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, »ISender<int, null>« $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 50 - line 20, character 67:

which is defined here

 3 | interface »ISender«<-TA, -TB> {}
 4 | 
 5 | final class SenderWA implements ISender<int, null> {

File "ctor_generic.php", line 3, character 11 - line 3, character 17:

and flows into this expression as the parameter hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> »$sender«) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 69 - line 20, character 75:

which itself flows into this expression as the type of the local variable

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, »$sender«);
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 33 - line 21, character 39:

The supertype comes from this hint

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     »ISender<TA, ?TB>« $sender,
 16 |   ) {}
 17 | }

File "ctor_generic.php", line 15, character 5 - line 15, character 20:

[Upper] Step 3 of 4

`\ISender` is a class or interface so next I checked the 2nd type arguments are subtypes.

The subtype comes from this hint

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, »?TB«> $sender,
 16 |   ) {}
 17 | }

File "ctor_generic.php", line 15, character 17 - line 15, character 19:

The supertype comes from this hint

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

[Upper] Step 4 of 4

The subtype is a nullable type so next I checked the non-null part was a subtype of the supertype.

The subtype comes from this generic parameter `TB` of `TestServiceBase`

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

The supertype is the same as before.

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

1 error found.
