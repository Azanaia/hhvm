error: Typing[4110] Invalid argument

File "ctor_generic.php", line 21, character 33 - line 21, character 39:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, »$sender«);
 22 |   }
 23 | }

Expected `null`

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

But got `string`

File "ctor_generic.php", line 20, character 39 - line 20, character 44:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

I checked the subtype constraint in [Main] because it was implied by transitivity from the constraints on the generic parameter `TB` of `TestServiceBase` in [Lower] and [Upper]

Main

[Main] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File "ctor_generic.php", line 12, character 19 - line 12, character 29:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this expression

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

[Main] Step 2 of 2

These are function types so next I checked the 2nd function parameter of the supertype and subtype were subtypes (functions are contravariant in their parameters so the direction of the subtype relationship is reversed).

This step is the cause of the error.

The subtype comes from this hint

File "ctor_generic.php", line 20, character 39 - line 20, character 44:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

and flows into this expression as the parameter hint

File "ctor_generic.php", line 20, character 46 - line 20, character 47:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string »$b«, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

which itself flows into this expression as the type of the local variable

File "ctor_generic.php", line 21, character 29 - line 21, character 30:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, »$b«, $sender);
 22 |   }
 23 | }

The supertype comes from this hint

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

Lower

[Lower] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File "ctor_generic.php", line 12, character 19 - line 12, character 29:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this expression

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

[Lower] Step 2 of 2

These are function types so next I checked the 2nd function parameter of the supertype and subtype were subtypes (functions are contravariant in their parameters so the direction of the subtype relationship is reversed).

The subtype comes from this hint

File "ctor_generic.php", line 20, character 39 - line 20, character 44:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, »string« $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

and flows into this expression as the parameter hint

File "ctor_generic.php", line 20, character 46 - line 20, character 47:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string »$b«, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

which itself flows into this expression as the type of the local variable

File "ctor_generic.php", line 21, character 29 - line 21, character 30:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, »$b«, $sender);
 22 |   }
 23 | }

The supertype comes from this generic parameter `TB` of `TestServiceBase`

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

Upper

[Upper] Step 1 of 4

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File "ctor_generic.php", line 12, character 19 - line 12, character 29:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function »__construct«(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, ?TB> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this expression

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

[Upper] Step 2 of 4

These are function types so next I checked the 3rd function parameter of the supertype and subtype were subtypes (functions are contravariant in their parameters so the direction of the subtype relationship is reversed).

The subtype comes from this hint

File "ctor_generic.php", line 20, character 50 - line 20, character 67:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, »ISender<int, null>« $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

which is defined here

File "ctor_generic.php", line 3, character 11 - line 3, character 17:

 3 | interface »ISender«<-TA, -TB> {}
 4 | 
 5 | final class SenderWA implements ISender<int, null> {

and flows into this expression as the parameter hint

File "ctor_generic.php", line 20, character 69 - line 20, character 75:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> »$sender«) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

which itself flows into this expression as the type of the local variable

File "ctor_generic.php", line 21, character 33 - line 21, character 39:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     parent::__construct($a, $b, »$sender«);
 22 |   }
 23 | }

The supertype comes from this hint (its definition was given above)

File "ctor_generic.php", line 15, character 5 - line 15, character 20:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     »ISender<TA, ?TB>« $sender,
 16 |   ) {}
 17 | }

[Upper] Step 3 of 4

`\ISender` is a class or interface so next I checked the 2nd type arguments are subtypes.

The subtype comes from this hint

File "ctor_generic.php", line 15, character 17 - line 15, character 19:

 11 | abstract class TestServiceBase<TA, TB> {
 12 |   public function __construct(
 13 |     protected TA $a,
 14 |     protected TB $b,
 15 |     ISender<TA, »?TB«> $sender,
 16 |   ) {}
 17 | }

The supertype comes from this hint

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

[Upper] Step 4 of 4

The subtype is a nullable type so next I checked the non-null part was a subtype of the supertype.

The subtype comes from this generic parameter `TB` of `TestServiceBase`

File "ctor_generic.php", line 21, character 5 - line 21, character 40:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, null> $sender) {
 21 |     »parent::__construct($a, $b, $sender)«;
 22 |   }
 23 | }

The supertype is the same as before.

File "ctor_generic.php", line 20, character 63 - line 20, character 66:

 19 | final class TestServiceWA extends TestServiceBase<int, string> {
 20 |   public function __construct(int $a, string $b, ISender<int, »null«> $sender) {
 21 |     parent::__construct($a, $b, $sender);
 22 |   }
 23 | }

1 error found
