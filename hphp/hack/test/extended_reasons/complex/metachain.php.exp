error: Typing[4110] Invalid argument

File "metachain.php", line 17, character 19 - line 17, character 50:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(»ReproIGCreatorAIMetachain::class«);
 18 | }

Expected `string`

File "metachain.php", line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }

But got `dynamic`

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

Here's why:

I checked the subtype constraint in [Main] because it was implied by transitivity from the constraints on the type variable.
The source of the subtype from [Main] is explained in [Lower].
The source of the subtype from [Main] is explained in [Upper]

Main

[Main] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which I solved to this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

and flows into this expression via an assignment

File "metachain.php", line 7, character 3 - line 7, character 6:

 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which itself flows into this expression as the type of the local variable

File "metachain.php", line 11, character 28 - line 11, character 31:

 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

The supertype comes from this hint

File "metachain.php", line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }

[Main] Step 2 of 2 (here is where the error occurred)

The subtype is a union type so next I checked all elements.

The subtype comes from this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

The supertype is the same as before.

File "metachain.php", line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }

Lower

[Lower] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which I solved to this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

and flows into this expression via an assignment

File "metachain.php", line 7, character 3 - line 7, character 6:

 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which itself flows into this expression as the type of the local variable

File "metachain.php", line 11, character 28 - line 11, character 31:

 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

The supertype comes from this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which I solved to this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

and flows into this expression via an assignment

File "metachain.php", line 7, character 3 - line 7, character 6:

 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which itself flows into this expression as the type of the local variable

File "metachain.php", line 11, character 28 - line 11, character 31:

 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

which itself flows into this type variable via an assignment

File "metachain.php", line 11, character 12 - line 11, character 23:

 10 |   );
 11 |   list($_, »$user_prompt«) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

[Lower] Step 2 of 2

The subtype is a union type so next I checked all elements.

The subtype comes from this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

The supertype is the same as before.

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

I checked the subtype constraint in [Upper / Main] because it was implied by transitivity from the constraints on the generic parameter `T` of `chain`.
The source of the subtype from [Upper / Main] is explained in [Upper / Lower].
The source of the subtype from [Upper / Main] is explained in [Upper / Upper]

Upper / Main

[Upper / Main] Step 1 of 3

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File "metachain.php", line 27, character 10 - line 27, character 14:

 26 | <<__NoAutoLikes>>
 27 | function »chain«<T>(T $_): ReproGenesisChain<T> {
 28 |   return null as nonnull;
 29 | }

The supertype comes from this expression

File "metachain.php", line 16, character 12 - line 16, character 20:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain($s)«;
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

[Upper / Main] Step 2 of 3

These are function types so next I checked the 1st function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this shape literal

File "metachain.php", line 13, character 8 - line 15, character 3:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = »shape(
 14 |     'prompt' => $user_prompt,
 15 |   );«
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);

and flows into this expression via an assignment

File "metachain.php", line 13, character 3 - line 13, character 4:

 12 |   //$user_prompt = $foo[1];
 13 |   »$s« = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);

which itself flows into this expression as the type of the local variable

File "metachain.php", line 16, character 18 - line 16, character 19:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain(»$s«);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

The supertype comes from this hint

File "metachain.php", line 21, character 23 - line 23, character 3:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = »shape(
 22 |     'prompt' => string,
 23 |   );«
 24 | }

[Upper / Main] Step 3 of 3

These are shape types so next I checked the required `prompt` field.

The subtype comes from this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which I solved to this expression

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

and flows into this expression via an assignment

File "metachain.php", line 7, character 3 - line 7, character 6:

 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

which itself flows into this expression as the type of the local variable

File "metachain.php", line 11, character 28 - line 11, character 31:

 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

which itself flows into this type variable via an assignment

File "metachain.php", line 11, character 12 - line 11, character 23:

 10 |   );
 11 |   list($_, »$user_prompt«) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

which itself flows into this expression via an assignment

File "metachain.php", line 11, character 12 - line 11, character 23:

 10 |   );
 11 |   list($_, »$user_prompt«) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(

which itself flows into this expression as the type of the local variable

File "metachain.php", line 14, character 17 - line 14, character 28:

 13 |   $s = shape(
 14 |     'prompt' => »$user_prompt«,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

The supertype comes from this hint

File "metachain.php", line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }

Upper / Lower

[Upper / Lower] Step 1 of 2

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File "metachain.php", line 27, character 10 - line 27, character 14:

 26 | <<__NoAutoLikes>>
 27 | function »chain«<T>(T $_): ReproGenesisChain<T> {
 28 |   return null as nonnull;
 29 | }

The supertype comes from this expression

File "metachain.php", line 16, character 12 - line 16, character 20:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain($s)«;
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

[Upper / Lower] Step 2 of 2

These are function types so next I checked the 1st function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this shape literal

File "metachain.php", line 13, character 8 - line 15, character 3:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = »shape(
 14 |     'prompt' => $user_prompt,
 15 |   );«
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);

and flows into this expression via an assignment

File "metachain.php", line 13, character 3 - line 13, character 4:

 12 |   //$user_prompt = $foo[1];
 13 |   »$s« = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);

which itself flows into this expression as the type of the local variable

File "metachain.php", line 16, character 18 - line 16, character 19:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain(»$s«);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

The supertype comes from this generic parameter `T` of `chain`

File "metachain.php", line 16, character 12 - line 16, character 16:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain«($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

Upper / Upper

[Upper / Upper] Step 1 of 1

I started by checking this subtype relationship.

The subtype comes from this generic parameter `T` of `chain`

File "metachain.php", line 16, character 12 - line 16, character 16:

 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain«($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

The supertype comes from this hint

File "metachain.php", line 21, character 23 - line 23, character 3:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = »shape(
 22 |     'prompt' => string,
 23 |   );«
 24 | }

1 error found
