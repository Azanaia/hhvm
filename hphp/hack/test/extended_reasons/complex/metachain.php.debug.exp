error: Typing[4110] Invalid argument

File "metachain.php", line 17, character 19 - line 17, character 50:

 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(»ReproIGCreatorAIMetachain::class«);
 18 | }

Expected `string`

File "metachain.php", line 22, character 17 - line 22, character 22:

 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }

But got `dynamic`

File "metachain.php", line 7, character 10 - line 10, character 3:

 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];

Derivation:
{
  "Transitive":{
    "lower":{
      "Derivation":[
        {
          "Begin":{
            "sub":[
              {
                "Flow":{
                  "from":[
                    {
                      "Solved":{
                        "solution":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ],
                        "of_":"6",
                        "in_":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ]
                      }
                    }
                  ],
                  "kind":"Flow_assign",
                  "into":[
                    {
                      "Flow":{
                        "from":[
                          {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                        ],
                        "kind":"Flow_local",
                        "into":[
                          {
                            "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "super":[
              {
                "Flow":{
                  "from":[
                    {
                      "Solved":{
                        "solution":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ],
                        "of_":"6",
                        "in_":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ]
                      }
                    }
                  ],
                  "kind":"Flow_assign",
                  "into":[
                    {
                      "Flow":{
                        "from":[
                          {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                        ],
                        "kind":"Flow_local",
                        "into":[
                          {
                            "Flow":{
                              "from":[
                                {
                                  "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                                }
                              ],
                              "kind":"Flow_assign",
                              "into":[
                                {
                                  "Type_variable":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23},"10"]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Step":{
            "rule":{"Using_prj_sub":"Prj_asymm_union"},
            "on_":"Subtype",
            "sub":[
              {
                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
              }
            ],
            "super":[
              {
                "Flow":{
                  "from":[
                    {
                      "Solved":{
                        "solution":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ],
                        "of_":"6",
                        "in_":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ]
                      }
                    }
                  ],
                  "kind":"Flow_assign",
                  "into":[
                    {
                      "Flow":{
                        "from":[
                          {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                        ],
                        "kind":"Flow_local",
                        "into":[
                          {
                            "Flow":{
                              "from":[
                                {
                                  "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                                }
                              ],
                              "kind":"Flow_assign",
                              "into":[
                                {
                                  "Type_variable":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23},"10"]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "upper":{
      "Transitive":{
        "lower":{
          "Derivation":[
            {
              "Begin":{
                "sub":[
                  {
                    "Support_dynamic_type":[{"filename":"metachain.php","line":27,"char_start":10,"char_end":14}]
                  }
                ],
                "super":[
                  {
                    "Witness":[{"filename":"metachain.php","line":16,"char_start":12,"char_end":20}]
                  }
                ]
              }
            },
            {
              "Step":{
                "rule":{"Using_prj":{"Prj_symm_fn_param":[0,0]}},
                "on_":"Both",
                "sub":[
                  {
                    "Flow":{
                      "from":[
                        {
                          "Shape_literal":[{"filename":"metachain.php","line":13,"char_start":8,"char_end":47}]
                        }
                      ],
                      "kind":"Flow_assign",
                      "into":[
                        {
                          "Flow":{
                            "from":[
                              {
                                "Witness":[{"filename":"metachain.php","line":13,"char_start":3,"char_end":4}]
                              }
                            ],
                            "kind":"Flow_local",
                            "into":[
                              {
                                "Witness":[{"filename":"metachain.php","line":16,"char_start":18,"char_end":19}]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "super":[
                  {
                    "Type_variable_generics":[
                      {"filename":"metachain.php","line":16,"char_start":12,"char_end":16},
                      "T",
                      "chain",
                      "11"
                    ]
                  }
                ]
              }
            }
          ]
        },
        "upper":{
          "Derivation":[
            {
              "Begin":{
                "sub":[
                  {
                    "Type_variable_generics":[
                      {"filename":"metachain.php","line":16,"char_start":12,"char_end":16},
                      "T",
                      "chain",
                      "11"
                    ]
                  }
                ],
                "super":[
                  {"Hint":[{"filename":"metachain.php","line":21,"char_start":23,"char_end":56}]}
                ]
              }
            }
          ]
        },
        "on_":[
          {
            "Type_variable_generics":[
              {"filename":"metachain.php","line":16,"char_start":12,"char_end":16},
              "T",
              "chain",
              "11"
            ]
          }
        ],
        "in_":{
          "Derivation":[
            {
              "Begin":{
                "sub":[
                  {
                    "Support_dynamic_type":[{"filename":"metachain.php","line":27,"char_start":10,"char_end":14}]
                  }
                ],
                "super":[
                  {
                    "Witness":[{"filename":"metachain.php","line":16,"char_start":12,"char_end":20}]
                  }
                ]
              }
            },
            {
              "Step":{
                "rule":{"Using_prj":{"Prj_symm_fn_param":[0,0]}},
                "on_":"Both",
                "sub":[
                  {
                    "Flow":{
                      "from":[
                        {
                          "Shape_literal":[{"filename":"metachain.php","line":13,"char_start":8,"char_end":47}]
                        }
                      ],
                      "kind":"Flow_assign",
                      "into":[
                        {
                          "Flow":{
                            "from":[
                              {
                                "Witness":[{"filename":"metachain.php","line":13,"char_start":3,"char_end":4}]
                              }
                            ],
                            "kind":"Flow_local",
                            "into":[
                              {
                                "Witness":[{"filename":"metachain.php","line":16,"char_start":18,"char_end":19}]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "super":[
                  {"Hint":[{"filename":"metachain.php","line":21,"char_start":23,"char_end":56}]}
                ]
              }
            },
            {
              "Step":{
                "rule":{"Using_prj":{" Prj_symm_shape":["prompt",{"Required":[]},{"Required":[]}]}},
                "on_":"Both",
                "sub":[
                  {
                    "Flow":{
                      "from":[
                        {
                          "Solved":{
                            "solution":[
                              {
                                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                              }
                            ],
                            "of_":"6",
                            "in_":[
                              {
                                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                              }
                            ]
                          }
                        }
                      ],
                      "kind":"Flow_assign",
                      "into":[
                        {
                          "Flow":{
                            "from":[
                              {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                            ],
                            "kind":"Flow_local",
                            "into":[
                              {
                                "Flow":{
                                  "from":[
                                    {
                                      "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                                    }
                                  ],
                                  "kind":"Flow_assign",
                                  "into":[
                                    {
                                      "Flow":{
                                        "from":[
                                          {
                                            "Type_variable":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23},"10"]
                                          }
                                        ],
                                        "kind":"Flow_assign",
                                        "into":[
                                          {
                                            "Flow":{
                                              "from":[
                                                {
                                                  "Witness":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23}]
                                                }
                                              ],
                                              "kind":"Flow_local",
                                              "into":[
                                                {
                                                  "Witness":[{"filename":"metachain.php","line":14,"char_start":17,"char_end":28}]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "super":[
                  {"Hint":[{"filename":"metachain.php","line":22,"char_start":17,"char_end":22}]}
                ]
              }
            }
          ]
        }
      }
    },
    "on_":[
      {
        "Type_variable":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23},"10"]
      }
    ],
    "in_":{
      "Derivation":[
        {
          "Begin":{
            "sub":[
              {
                "Flow":{
                  "from":[
                    {
                      "Solved":{
                        "solution":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ],
                        "of_":"6",
                        "in_":[
                          {
                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                          }
                        ]
                      }
                    }
                  ],
                  "kind":"Flow_assign",
                  "into":[
                    {
                      "Flow":{
                        "from":[
                          {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                        ],
                        "kind":"Flow_local",
                        "into":[
                          {
                            "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "super":[
              {"Hint":[{"filename":"metachain.php","line":22,"char_start":17,"char_end":22}]}
            ]
          }
        },
        {
          "Step":{
            "rule":{"Using_prj_sub":"Prj_asymm_union"},
            "on_":"Subtype",
            "sub":[
              {
                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
              }
            ],
            "super":[
              {"Hint":[{"filename":"metachain.php","line":22,"char_start":17,"char_end":22}]}
            ]
          }
        }
      ]
    }
  }
}

File "", line 0, character 0 - line 0, character -1:


Reason:
{
  "Subtype":{
    "sub":[
      {
        "Lower_bound":{
          "bound":[
            {
              "Lower_bound":{
                "bound":[
                  {
                    "Prj_one":{
                      "part":[
                        {
                          "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                        }
                      ],
                      "prj":"Prj_asymm_union",
                      "whole":[
                        {
                          "Solved":{
                            "solution":[
                              {
                                "Solved":{
                                  "solution":[
                                    {
                                      "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                                    }
                                  ],
                                  "of_":"6",
                                  "in_":[
                                    {
                                      "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                                    }
                                  ]
                                }
                              }
                            ],
                            "of_":"8",
                            "in_":[
                              {
                                "Flow":{
                                  "from":[
                                    {
                                      "Solved":{
                                        "solution":[
                                          {
                                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                                          }
                                        ],
                                        "of_":"6",
                                        "in_":[
                                          {
                                            "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind":"Flow_assign",
                                  "into":[
                                    {
                                      "Flow":{
                                        "from":[
                                          {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                                        ],
                                        "kind":"Flow_local",
                                        "into":[
                                          {
                                            "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "of":[
                  {
                    "Flow":{
                      "from":[
                        {
                          "Solved":{
                            "solution":[
                              {
                                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                              }
                            ],
                            "of_":"6",
                            "in_":[
                              {
                                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                              }
                            ]
                          }
                        }
                      ],
                      "kind":"Flow_assign",
                      "into":[
                        {
                          "Flow":{
                            "from":[
                              {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                            ],
                            "kind":"Flow_local",
                            "into":[
                              {
                                "Flow":{
                                  "from":[
                                    {
                                      "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                                    }
                                  ],
                                  "kind":"Flow_assign",
                                  "into":[
                                    {
                                      "Type_variable":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23},"10"]
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "of":[
            {
              "Prj_both":{
                "sub_prj":[
                  {
                    "Flow":{
                      "from":[
                        {
                          "Solved":{
                            "solution":[
                              {
                                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                              }
                            ],
                            "of_":"6",
                            "in_":[
                              {
                                "Witness":[{"filename":"metachain.php","line":7,"char_start":10,"char_end":104}]
                              }
                            ]
                          }
                        }
                      ],
                      "kind":"Flow_assign",
                      "into":[
                        {
                          "Flow":{
                            "from":[
                              {"Witness":[{"filename":"metachain.php","line":7,"char_start":3,"char_end":6}]}
                            ],
                            "kind":"Flow_local",
                            "into":[
                              {
                                "Flow":{
                                  "from":[
                                    {
                                      "Witness":[{"filename":"metachain.php","line":11,"char_start":28,"char_end":31}]
                                    }
                                  ],
                                  "kind":"Flow_assign",
                                  "into":[
                                    {
                                      "Flow":{
                                        "from":[
                                          {
                                            "Type_variable":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23},"10"]
                                          }
                                        ],
                                        "kind":"Flow_assign",
                                        "into":[
                                          {
                                            "Flow":{
                                              "from":[
                                                {
                                                  "Witness":[{"filename":"metachain.php","line":11,"char_start":12,"char_end":23}]
                                                }
                                              ],
                                              "kind":"Flow_local",
                                              "into":[
                                                {
                                                  "Witness":[{"filename":"metachain.php","line":14,"char_start":17,"char_end":28}]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "prj":{" Prj_symm_shape":["prompt",{"Required":[]},{"Required":[]}]},
                "sub":[
                  {
                    "Lower_bound":{
                      "bound":[
                        {
                          "Lower_bound":{
                            "bound":[
                              {
                                "Prj_both":{
                                  "sub_prj":[
                                    {
                                      "Flow":{
                                        "from":[
                                          {
                                            "Shape_literal":[{"filename":"metachain.php","line":13,"char_start":8,"char_end":47}]
                                          }
                                        ],
                                        "kind":"Flow_assign",
                                        "into":[
                                          {
                                            "Flow":{
                                              "from":[
                                                {
                                                  "Witness":[{"filename":"metachain.php","line":13,"char_start":3,"char_end":4}]
                                                }
                                              ],
                                              "kind":"Flow_local",
                                              "into":[
                                                {
                                                  "Witness":[{"filename":"metachain.php","line":16,"char_start":18,"char_end":19}]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "prj":{"Prj_symm_fn_param":[0,0]},
                                  "sub":[
                                    {
                                      "Support_dynamic_type":[{"filename":"metachain.php","line":27,"char_start":10,"char_end":14}]
                                    }
                                  ],
                                  "super":[
                                    {
                                      "Witness":[{"filename":"metachain.php","line":16,"char_start":12,"char_end":20}]
                                    }
                                  ]
                                }
                              }
                            ],
                            "of":[
                              {
                                "Type_variable_generics":[
                                  {"filename":"metachain.php","line":16,"char_start":12,"char_end":16},
                                  "T",
                                  "chain",
                                  "11"
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "of":[
                        {
                          "Type_variable_generics":[
                            {"filename":"metachain.php","line":16,"char_start":12,"char_end":16},
                            "T",
                            "chain",
                            "11"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "super":[
                  {"Hint":[{"filename":"metachain.php","line":21,"char_start":23,"char_end":56}]}
                ]
              }
            }
          ]
        }
      }
    ],
    "super":[
      {"Hint":[{"filename":"metachain.php","line":22,"char_start":17,"char_end":22}]}
    ]
  }
}

File "", line 0, character 0 - line 0, character -1:


warning: Warn[12012] This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `null` which shares no values with `nonnull`.

File "metachain.php", line 28, character 10 - line 28, character 24:

 27 | function chain<T>(T $_): ReproGenesisChain<T> {
 28 |   return »null as nonnull«;
 29 | }

warning: Warn[12012] This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `null` which shares no values with `nonnull`.

File "metachain.php", line 36, character 12 - line 36, character 26:

 35 |   ): ReproGenesisChain<mixed> {
 36 |     return »null as nonnull«;
 37 |   }
 38 | }

warning: Warn[12012] This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `null` which shares no values with `nonnull`.

File "metachain.php", line 50, character 12 - line 50, character 26:

 49 |   public static function fromValue(TOut $_): ReproMetaChain<TIn, TOut> {
 50 |     return »null as nonnull«;
 51 |   }
 52 |   public function then<TNextOut>(

warning: Warn[12012] This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `null` which shares no values with `nonnull`.

File "metachain.php", line 55, character 12 - line 55, character 26:

 54 |   ): ReproMetaChain<TIn, TNextOut> {
 55 |     return »null as nonnull«;
 56 |   }
 57 | }

warning: Warn[12012] This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `null` which shares no values with `nonnull`.

File "metachain.php", line 64, character 10 - line 64, character 24:

 63 | ): Awaitable<TOut> {
 64 |   return »null as nonnull«;
 65 | }

6 errors found
