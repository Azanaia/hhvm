error: Typing[4110] Invalid return type

File "workplace_invariant.php", line 16, character 12 - line 16, character 21:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     return »foo::class«;
 17 | }

Expected `int`

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

But got `num`

File "workplace_invariant.php", line 15, character 25 - line 15, character 27:

 15 | function getClass<Tu as »num«>(): classname<bar<Tu>> {
 16 |     return foo::class;
 17 | }

Step 1 of 5

I started by checking this subtype relationship.

The subtype comes from this implicitly defined constant `::class` of class `\foo`

File "workplace_invariant.php", line 8, character 13 - line 8, character 15:

 8 | final class »foo« implements bar<int> {
 9 |   public function get(): int {
10 |     return 1;

which is defined here

File "/tmp/YFjs8IG871/classname.hhi", line 19, character 11 - line 19, character 19:

 18 |   <<__NoAutoDynamic>>
 19 |   newtype »classname«<+T> as typename<T> = typename<T>;
 20 | 
 21 |   /**

and flows into this expression because it is used in a return position

File "workplace_invariant.php", line 16, character 5 - line 16, character 22:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     »return foo::class;«
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 33 - line 15, character 50:

 15 | function getClass<Tu as num>(): »classname<bar<Tu>>« {
 16 |     return foo::class;
 17 | }

Step 2 of 5

`\HH\classname` is a newtype so next I checked the 1st type arguments are subtypes.

The subtype comes from this implicitly defined constant `::class` of class `\foo`

File "workplace_invariant.php", line 8, character 13 - line 8, character 15:

 8 | final class »foo« implements bar<int> {
 9 |   public function get(): int {
10 |     return 1;

and flows into this expression via the generic `this`

File "workplace_invariant.php", line 16, character 12 - line 16, character 14:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     return »foo«::class;
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 43 - line 15, character 49:

 15 | function getClass<Tu as num>(): classname<»bar<Tu>«> {
 16 |     return foo::class;
 17 | }

which is defined here

File "workplace_invariant.php", line 3, character 11 - line 3, character 13:

 3 | interface »bar«<T as num> {
 4 |   public function get(): T;
 5 | }

Step 3 of 5

The subtype extends or implements a class or interface so next I checked that was a subtype of the supertype.

The subtype comes from this hint

File "workplace_invariant.php", line 8, character 28 - line 8, character 35:

 8 | final class foo implements »bar<int>« {
 9 |   public function get(): int {
10 |     return 1;

The supertype is the same as before.

File "workplace_invariant.php", line 15, character 43 - line 15, character 49:

 15 | function getClass<Tu as num>(): classname<»bar<Tu>«> {
 16 |     return foo::class;
 17 | }

Step 4 of 5

`\bar` is a class or interface so next I checked the 1st type arguments are subtypes. The type parameter is invariant so the subtype relationship must hold in both directions. Here I check the covariant case.

The subtype comes from this hint

File "workplace_invariant.php", line 15, character 47 - line 15, character 48:

 15 | function getClass<Tu as num>(): classname<bar<»Tu«>> {
 16 |     return foo::class;
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

Step 5 of 5

The subtype declares an upper bound so next I checked that was a subtype of the supertype.

This step is the cause of the error.

The subtype comes from this hint

File "workplace_invariant.php", line 15, character 25 - line 15, character 27:

 15 | function getClass<Tu as »num«>(): classname<bar<Tu>> {
 16 |     return foo::class;
 17 | }

The supertype is the same as before.

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

error: Typing[4110] Invalid return type

File "workplace_invariant.php", line 16, character 12 - line 16, character 21:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     return »foo::class«;
 17 | }

Expected `int`

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

But got `Tu as num`

File "workplace_invariant.php", line 15, character 47 - line 15, character 48:

 15 | function getClass<Tu as num>(): classname<bar<»Tu«>> {
 16 |     return foo::class;
 17 | }

Step 1 of 4

I started by checking this subtype relationship.

The subtype comes from this implicitly defined constant `::class` of class `\foo`

File "workplace_invariant.php", line 8, character 13 - line 8, character 15:

 8 | final class »foo« implements bar<int> {
 9 |   public function get(): int {
10 |     return 1;

which is defined here

File "/tmp/YFjs8IG871/classname.hhi", line 19, character 11 - line 19, character 19:

 18 |   <<__NoAutoDynamic>>
 19 |   newtype »classname«<+T> as typename<T> = typename<T>;
 20 | 
 21 |   /**

and flows into this expression because it is used in a return position

File "workplace_invariant.php", line 16, character 5 - line 16, character 22:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     »return foo::class;«
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 33 - line 15, character 50:

 15 | function getClass<Tu as num>(): »classname<bar<Tu>>« {
 16 |     return foo::class;
 17 | }

Step 2 of 4

`\HH\classname` is a newtype so next I checked the 1st type arguments are subtypes.

The subtype comes from this implicitly defined constant `::class` of class `\foo`

File "workplace_invariant.php", line 8, character 13 - line 8, character 15:

 8 | final class »foo« implements bar<int> {
 9 |   public function get(): int {
10 |     return 1;

and flows into this expression via the generic `this`

File "workplace_invariant.php", line 16, character 12 - line 16, character 14:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     return »foo«::class;
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 43 - line 15, character 49:

 15 | function getClass<Tu as num>(): classname<»bar<Tu>«> {
 16 |     return foo::class;
 17 | }

which is defined here

File "workplace_invariant.php", line 3, character 11 - line 3, character 13:

 3 | interface »bar«<T as num> {
 4 |   public function get(): T;
 5 | }

Step 3 of 4

The subtype extends or implements a class or interface so next I checked that was a subtype of the supertype.

The subtype comes from this hint

File "workplace_invariant.php", line 8, character 28 - line 8, character 35:

 8 | final class foo implements »bar<int>« {
 9 |   public function get(): int {
10 |     return 1;

The supertype is the same as before.

File "workplace_invariant.php", line 15, character 43 - line 15, character 49:

 15 | function getClass<Tu as num>(): classname<»bar<Tu>«> {
 16 |     return foo::class;
 17 | }

Step 4 of 4

`\bar` is a class or interface so next I checked the 1st type arguments are subtypes. The type parameter is invariant so the subtype relationship must hold in both directions. Here I check the covariant case.

This step is the cause of the error.

The subtype comes from this hint

File "workplace_invariant.php", line 15, character 47 - line 15, character 48:

 15 | function getClass<Tu as num>(): classname<bar<»Tu«>> {
 16 |     return foo::class;
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

error: Typing[4110] Invalid return type

File "workplace_invariant.php", line 16, character 12 - line 16, character 21:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     return »foo::class«;
 17 | }

Expected `Tu`

File "workplace_invariant.php", line 15, character 47 - line 15, character 48:

 15 | function getClass<Tu as num>(): classname<bar<»Tu«>> {
 16 |     return foo::class;
 17 | }

But got `int`

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

Step 1 of 4

I started by checking this subtype relationship.

The subtype comes from this implicitly defined constant `::class` of class `\foo`

File "workplace_invariant.php", line 8, character 13 - line 8, character 15:

 8 | final class »foo« implements bar<int> {
 9 |   public function get(): int {
10 |     return 1;

which is defined here

File "/tmp/YFjs8IG871/classname.hhi", line 19, character 11 - line 19, character 19:

 18 |   <<__NoAutoDynamic>>
 19 |   newtype »classname«<+T> as typename<T> = typename<T>;
 20 | 
 21 |   /**

and flows into this expression because it is used in a return position

File "workplace_invariant.php", line 16, character 5 - line 16, character 22:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     »return foo::class;«
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 33 - line 15, character 50:

 15 | function getClass<Tu as num>(): »classname<bar<Tu>>« {
 16 |     return foo::class;
 17 | }

Step 2 of 4

`\HH\classname` is a newtype so next I checked the 1st type arguments are subtypes.

The subtype comes from this implicitly defined constant `::class` of class `\foo`

File "workplace_invariant.php", line 8, character 13 - line 8, character 15:

 8 | final class »foo« implements bar<int> {
 9 |   public function get(): int {
10 |     return 1;

and flows into this expression via the generic `this`

File "workplace_invariant.php", line 16, character 12 - line 16, character 14:

 15 | function getClass<Tu as num>(): classname<bar<Tu>> {
 16 |     return »foo«::class;
 17 | }

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 43 - line 15, character 49:

 15 | function getClass<Tu as num>(): classname<»bar<Tu>«> {
 16 |     return foo::class;
 17 | }

which is defined here

File "workplace_invariant.php", line 3, character 11 - line 3, character 13:

 3 | interface »bar«<T as num> {
 4 |   public function get(): T;
 5 | }

Step 3 of 4

The subtype extends or implements a class or interface so next I checked that was a subtype of the supertype.

The subtype comes from this hint

File "workplace_invariant.php", line 8, character 28 - line 8, character 35:

 8 | final class foo implements »bar<int>« {
 9 |   public function get(): int {
10 |     return 1;

The supertype is the same as before.

File "workplace_invariant.php", line 15, character 43 - line 15, character 49:

 15 | function getClass<Tu as num>(): classname<»bar<Tu>«> {
 16 |     return foo::class;
 17 | }

Step 4 of 4

`\bar` is a class or interface so next I checked the 1st type arguments are subtypes. The type parameter is invariant so the subtype relationship must hold in both directions. Here I check the covariant case.

This step is the cause of the error.

The subtype comes from this hint

File "workplace_invariant.php", line 8, character 32 - line 8, character 34:

 8 | final class foo implements bar<»int«> {
 9 |   public function get(): int {
10 |     return 1;

The supertype comes from this hint

File "workplace_invariant.php", line 15, character 47 - line 15, character 48:

 15 | function getClass<Tu as num>(): classname<bar<»Tu«>> {
 16 |     return foo::class;
 17 | }

3 errors found.
