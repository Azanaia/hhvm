# Test declaring type aliases


.function N foo("@Foo" <"Foo" soft > $x) {
  Null
  RetC
}

.function N bar("@Bar" <"Bar" soft > $x) {
  Null
  RetC
}

.function N baz("@Baz" <"Baz" soft > $x) {
  Null
  RetC
}

.function N quux("@Quux" <"Quux" soft > $x) {
  Null
  RetC
}

.class C {
}

.alias Foo = <"HH\\int"> """Y:1:{s:4:\"kind\";i:1;}""";
.alias Bar = <"C"> """Y:2:{s:4:\"kind\";i:101;s:9:\"classname\";s:1:\"C\";}""";
.alias Baz = <"C" nullable> """Y:3:{s:8:\"nullable\";b:1;s:4:\"kind\";i:101;s:9:\"classname\";s:1:\"C\";}""";
.alias Quux = <N> """Y:1:{s:4:\"kind\";i:1;}""";

.function ["__EntryPoint"("""y:0:{}""")] N main() {
  .declvars $x;
  NullUninit
  NullUninit
  Int 0
  FCallFuncD <> 1 1 "" "" - "" "foo"
  PopC
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" "" - "" "foo"
  PopC

  NewObjD "C"
  Dup
  NullUninit
  FCallCtor <LockWhileUnwinding> 0 1 "" "" - "" ""
  PopC
  LockObj
  SetL $x
  PopC
  NullUninit
  NullUninit
  CGetL $x
  FCallFuncD <> 1 1 "" "" - "" "bar"
  PopC
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" "" - "" "bar"
  PopC
  NullUninit
  NullUninit
  Null
  FCallFuncD <> 1 1 "" "" - "" "bar"
  PopC
  NullUninit
  NullUninit
  CGetL $x
  FCallFuncD <> 1 1 "" "" - "" "baz"
  PopC
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" "" - "" "baz"
  PopC
  NullUninit
  NullUninit
  Null
  FCallFuncD <> 1 1 "" "" - "" "baz"
  PopC
  NullUninit
  NullUninit
  CGetL $x
  FCallFuncD <> 1 1 "" "" - "" "quux"
  PopC
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" "" - "" "quux"
  PopC
  NullUninit
  NullUninit
  Null
  FCallFuncD <> 1 1 "" "" - "" "quux"
  PopC

  Int 1
  RetC
}
